import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# 设置显示中文字体和避免负号显示问题
plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题

# 读取数据
combined_data = pd.read_excel('C:/Users/26962/PycharmProjects/Math/data2/附件2合并表.xlsx')

# 定义不同互补性的提升比例
bean_boost_factor = 1.10  # 豆类提升比例
light_boost_factor = 1.15  # 光照互补性提升比例
root_boost_factor = 1.20  # 根系互补性提升比例

# 定义作物的分类
bean_types = [1, 2, 3, 4, 5, 17, 18, 19]  # 豆类作物
tall_crops = [7, 8, 9, 10, 16]  # 高杆作物
short_crops = [1, 2, 3, 4, 5, 12, 17, 18, 19, 20, 21, 29]  # 低矮作物
deep_root_crops = [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20]  # 深根作物
shallow_root_crops = [1, 2, 3, 4, 5, 12, 17, 18, 19, 21, 22, 23, 24, 25, 26,
                      27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]  # 浅根作物

# 按照地块分组，判断每个地块种植了哪些作物
grouped_by_field = combined_data.groupby('种植地块')

# 定义一个函数，用于应用三种互补性
def apply_complementarity(group):
    has_bean = group['作物编号'].isin(bean_types).any()  # 是否包含豆类作物
    has_tall_crop = group['作物编号'].isin(tall_crops).any()  # 是否包含高杆作物
    has_short_crop = group['作物编号'].isin(short_crops).any()  # 是否包含低矮作物
    has_deep_root = group['作物编号'].isin(deep_root_crops).any()  # 是否包含深根作物
    has_shallow_root = group['作物编号'].isin(shallow_root_crops).any()  # 是否包含浅根作物

    # 1. 豆类互补性
    if has_bean:
        group['提升后亩产量'] = group.apply(lambda row: row['亩产量/斤'] * bean_boost_factor
        if row['作物编号'] not in bean_types else row['亩产量/斤'], axis=1)
    else:
        group['提升后亩产量'] = group['亩产量/斤']

    # 2. 光照互补性
    if has_tall_crop and has_short_crop:
        group['提升后亩产量'] = group.apply(lambda row: row['提升后亩产量'] * light_boost_factor
        if row['作物编号'] in short_crops else row['提升后亩产量'], axis=1)

    # 3. 根系互补性
    if has_deep_root and has_shallow_root:
        group['提升后亩产量'] = group.apply(lambda row: row['提升后亩产量'] * root_boost_factor
        if row['作物编号'] in shallow_root_crops else row['提升后亩产量'], axis=1)

    return group

# 对每个地块应用三种互补性提升逻辑
combined_data = grouped_by_field.apply(apply_complementarity)

# 确保非豆类作物的数据是副本
non_bean_data = combined_data[combined_data['作物编号'].apply(lambda x: x not in bean_types)].copy()

# 确保提升后的亩产量和原始亩产量都已经计算好
print(non_bean_data[['作物名称', '亩产量/斤', '提升后亩产量']].head())

# 计算每个作物的实际增长量（提升后亩产量 - 原始亩产量）
non_bean_data['增长量'] = non_bean_data['提升后亩产量'] - non_bean_data['亩产量/斤']

# 输出增长量
print(non_bean_data[['作物名称', '亩产量/斤', '提升后亩产量', '增长量']].head())

# 计算总体增长率
total_orig_yields = non_bean_data['亩产量/斤'].sum()
total_boosted_yields = non_bean_data['提升后亩产量'].sum()
total_growth_rate = (total_boosted_yields - total_orig_yields) / total_orig_yields * 100

# 输出总体增长率
print(f"总体增长量为:{total_boosted_yields-total_orig_yields}亩产量/斤")
print(f"总体增长率为: {total_growth_rate:.2f}%")

# 可视化 - 对比提升前后亩产量
fig, ax = plt.subplots(figsize=(12, 8))

# 获取作物名称、原始亩产量和提升后亩产量
x_labels = non_bean_data['作物名称'].unique()
x_pos = np.arange(len(x_labels))  # X轴位置

# 原始和提升后亩产量
orig_yields = non_bean_data.groupby('作物名称')['亩产量/斤'].mean()
boosted_yields = non_bean_data.groupby('作物名称')['提升后亩产量'].mean()

# 绘制条形图
bar_width = 0.4
ax.bar(x_pos - bar_width / 2, orig_yields, width=bar_width, label='原始亩产量', color='#4F81BD', alpha=0.8)
ax.bar(x_pos + bar_width / 2, boosted_yields, width=bar_width, label='提升后亩产量', color='#C0504D', alpha=0.8)

# 设置标题和标签
ax.set_xlabel('作物名称', fontsize=14)
ax.set_ylabel('亩产量/斤', fontsize=14)
ax.set_title('互补性分析：豆类、光照和根系互补性的提升效果', fontsize=16)
ax.set_xticks(x_pos)
ax.set_xticklabels(x_labels, rotation=45, ha='right')

# 增加网格线
ax.grid(True, which='both', axis='y', linestyle='--', linewidth=0.7, alpha=0.7)

# 显示图例
ax.legend()

# 自动调整布局
plt.tight_layout()

# 显示图表
plt.show()
